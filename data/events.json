[null,{"name":"autorole","temp":"mem","event-type":"6","_id":"EDJte","actions":[{"info":"1","find":"ğŸ”‘â”‚Member","storage":"1","varName":"memrole","name":"Find Role"},{"member":"2","varName2":"mem","role":"3","varName":"memrole","name":"Add Member Role"}]},{"name":"BotStatus","temp":"","event-type":"1","actions":[{"gameName":"|Help for all the commands!","gameLink":"","name":"Set Bot Game"}]},{"name":"Invites","temp":"","event-type":"12","actions":[]},{"name":"createWallet","temp":"memberJoin","event-type":"6","actions":[{"member":"2","varName":"memberJoin","dataName":"wallet","changeType":"0","value":"0","name":"Control Member Data"},{"channel":"4","varName":"","message":"Welcome ${tempVars(\"memberJoin\")}\n\nYour wallet has been created","storage":"0","varName2":"","name":"Send Message"}],"restriction":"0","permissions":"NONE"},{"name":"verification","temp":"","event-type":"0","_id":"XeeYH","actions":[{"message":"0","varName":"","info":"2","storage":"1","varName2":"text","name":"Store Message Info"},{"message":"0","varName":"","info":"3","storage":"1","varName2":"author","name":"Store Message Info"},{"message":"0","varName":"","info":"4","storage":"1","varName2":"mesgchan","name":"Store Message Info"},{"channel":"3","varName":"mesgchan","info":"7","storage":"1","varName2":"chndm","name":"Store Channel Info"},{"storage":"1","varName":"chndm","comparison":"1","value":"true","iftrue":"1","iftrueVal":"","iffalse":"0","iffalseVal":"","name":"Check Variable"},{"member":"2","varName":"author","dataName":"verify","comparison":"1","value":"1","iftrue":"1","iftrueVal":"","iffalse":"0","iffalseVal":"","name":"Check Member Data"},{"storage":"0","varName":"text","reason":"","name":"Delete Message"},{"server":"0","varName":"","storage":"1","varName2":"bot","name":"Get Bot as Member"},{"member":"2","varName":"bot","info":"1","storage":"1","varName2":"botid","name":"Store Member Info"},{"storage":"1","varName":"number","min":"1","max":"9","name":"Generate Random Number"},{"storage":"1","varName":"number2","min":"1","max":"9","name":"Generate Random Number"},{"storage":"1","varName":"number3","min":"1","max":"9","name":"Generate Random Number"},{"input":"'*'","wordLength":"1","storage":"1","varName":"word","name":"Randomize Letters"},{"input":"'*'","wordLength":"1","storage":"1","varName":"word2","name":"Randomize Letters"},{"input":"'*'","wordLength":"1","storage":"1","varName":"word3","name":"Randomize Letters"},{"storage":"1","varName":"code","changeType":"1","value":"tempVars(\"number\")","name":"Control Variable"},{"storage":"1","varName":"code","changeType":"1","value":"tempVars(\"word\")","name":"Control Variable"},{"storage":"1","varName":"code","changeType":"1","value":"tempVars(\"number2\")","name":"Control Variable"},{"storage":"1","varName":"code","changeType":"1","value":"tempVars(\"word2\")","name":"Control Variable"},{"storage":"1","varName":"code","changeType":"1","value":"tempVars(\"number3\")","name":"Control Variable"},{"storage":"1","varName":"code","changeType":"1","value":"tempVars(\"word3\")","name":"Control Variable"},{"member":"1","varName":"","dataName":"underverify","comparison":"1","value":"1","iftrue":"1","iftrueVal":"","iffalse":"0","iffalseVal":"","name":"Check Member Data"},{"member":"1","varName":"","dataName":"underverify","changeType":"0","value":"1","name":"Control Member Data"},{"title":"","author":"${globalVars(\"botname\")}","color":"0xFFFF00","url":"","authorIcon":"${globalVars(\"boturl\")}","authorUrl":"","imageUrl":"","thumbUrl":"","timestamp":"false","debug":"false","text":"","year":"","month":"","day":"","hour":"","minute":"","second":"","storage":"1","varName":"embed","name":"Create Embed Message"},{"storage":"1","varName":"embed","message":"KÃ©rlek azonosÃ­tsd magadat, hogy nem vagy robot.\nEzt a mÅ±veletet egyszer kell elvÃ©gezned, utÃ¡na a bot tudni fogja, hogy te nem vagy robot.\nKÃ©rlek kÃ¼ld el nekem ezt a kÃ³dot: **${tempVars(\"code\")}**\nErre 60 mÃ¡sodperced van!","name":"Set Embed Description"},{"storage":"1","varName":"embed","channel":"1","varName2":"","storage3":"1","varName3":"stored","iffalse":"0","iffalseVal":"","messageContent":"","name":"Send Embed Message"},{"message":"1","varName":"stored","info":"4","storage":"1","varName2":"channel","name":"Store Message Info"},{"storage":"3","varName":"channel","filter":"content.length > 0 && author.id === user.id","max":"1","time":"60000","iftrue":"0","iftrueVal":"","iffalse":"2","iffalseVal":"37","storage2":"1","varName2":"back","name":"Await Response Call Action"},{"message":"1","varName":"back","info":"2","storage":"1","varName2":"testthis","name":"Store Message Info"},{"storage":"1","varName":"testthis","comparison":"5","value":"tempVars(\"code\")","iftrue":"0","iftrueVal":"","iffalse":"2","iffalseVal":"43","name":"Check Variable"},{"member":"2","varName":"author","dataName":"verify","changeType":"0","value":"1","name":"Control Member Data"},{"title":"","author":"${globalVars(\"botname\")}","color":"0xFFFF00","url":"","authorIcon":"${globalVars(\"boturl\")}","authorUrl":"","imageUrl":"","thumbUrl":"","timestamp":"false","debug":"false","text":"","year":"","month":"","day":"","hour":"","minute":"","second":"","storage":"1","varName":"embedsiker","name":"Create Embed Message"},{"storage":"1","varName":"embedsiker","message":"Sikeresen beazonosÃ­tottad magadat, hogy nem vagy robot. MostantÃ³l minden szerveren, ahol ez a bot megtalÃ¡lhatÃ³ tudni fogjÃ¡k hogy te nem vagy robot! TovÃ¡bbi jÃ³ csevegÃ©st kÃ­vÃ¡nunk!","name":"Set Embed Description"},{"storage":"1","varName":"embedsiker","channel":"1","varName2":"","storage3":"0","varName3":"","iffalse":"0","iffalseVal":"","messageContent":"","name":"Send Embed Message"},{"member":"1","varName":"","dataName":"underverify","changeType":"0","value":"0","name":"Control Member Data"},{"name":"End Action Sequence"},{"title":"","author":"${globalVars(\"botname\")}","color":"0xFFFF00","url":"","authorIcon":"${globalVars(\"boturl\")}","authorUrl":"","imageUrl":"","thumbUrl":"","timestamp":"false","debug":"false","text":"","year":"","month":"","day":"","hour":"","minute":"","second":"","storage":"1","varName":"embedtime","name":"Create Embed Message"},{"storage":"1","varName":"embedtime","message":"Nem azonosÃ­tottad magadat idÅ‘ben! Ha azonosÃ­tani szeretnÃ©d magadat, Ã©s Ã¼zeneteket kÃ¼ldeni akkor kÃ©rlek hasznÃ¡ld a ${server.tag}verify parancsot, vagy Ã­rj bÃ¡rmelyik csatornÃ¡ba egy szerveren ahol megtalÃ¡lhatÃ³ a bot.","name":"Set Embed Description"},{"storage":"1","varName":"embedtime","channel":"1","varName2":"","storage3":"0","varName3":"","iffalse":"0","iffalseVal":"","messageContent":"","name":"Send Embed Message"},{"storage":"1","varName":"","channel":"0","varName2":"","storage3":"0","varName3":"","iffalse":"0","iffalseVal":"","messageContent":"","name":"Send Embed Message"},{"member":"1","varName":"","dataName":"underverify","changeType":"0","value":"0","name":"Control Member Data"},{"name":"End Action Sequence"},{"title":"","author":"${globalVars(\"botname\")}","color":"0xFFFF00","url":"","authorIcon":"${globalVars(\"boturl\")}","authorUrl":"","imageUrl":"","thumbUrl":"","timestamp":"false","debug":"false","text":"","year":"","month":"","day":"","hour":"","minute":"","second":"","storage":"1","varName":"embed2","name":"Create Embed Message"},{"storage":"1","varName":"embed2","message":"Nem sikerÃ¼lt azonosÃ­tanod magadat! KÃ©rlek Ã­rd be a ${server.tag}verify parancsot, vagy kÃ¼ldj egy Ã¼zenetet bÃ¡rmelyik csatornÃ¡ba, ahol a bot megtalÃ¡lhatÃ³ ha szeretnÃ©d magadat beazonosÃ­tani, Ã©s Ã¼zeneteket kÃ¼ldeni! ","name":"Set Embed Description"},{"storage":"1","varName":"embed2","channel":"1","varName2":"","storage3":"0","varName3":"","iffalse":"0","iffalseVal":"","messageContent":"","name":"Send Embed Message"}],"restriction":"0","comType":"3","permissions":"NONE"},{"name":"reactionStart","temp":"","event-type":"1","_id":"Lwriz","actions":[{"behavior":"0","interpretation":"1","code":"if (globalVars(\"RoleReactionMenuAlreadyRan\") == null) {\n    const Discord = require(\"discord.js\");\n    Actions.storeValue(true, 3, \"RoleReactionMenuAlreadyRan\", cache);\n    const fs = require('fs');\n    const request = require('request');\n\n    //Settings\n    const dmUserAfter = true; // Default: true, can be changed to false\n    var messageSentAdd = 'Successfully added the role {rolename} in {server}';\n    var messageSentRemove = 'Successfully removed the role {rolename} in {server}';\n    var debug = false; // Default: false, can be changed to true\n    var checkUpdates = true;\n    // The only variables that work rn, {rolename} and {server}\n\n    var requiredIntents = [\"GUILDS\",\"GUILD_MEMBERS\",\"GUILD_MESSAGE_REACTIONS\",\"GUILD_MESSAGES\"];\n        var intentCheck = new Discord.Intents(DBM.Bot.intents()).toArray();\n        requiredIntents.forEach(intent => {\n            if (!intentCheck.includes(intent)) {\n                console.log(`[Role Reaction] You don't have the ${intent} intent enabled!`)\n            }\n        })\n\n\n\n    if (checkUpdates) {\n        request('https://raw.githubusercontent.com/ItzPike/DBM-Rawdata-Releases/master/Role%20Reaction%20Menu/versionCheck.json', function(error, response, body) {\n            if (response.statusCode == 200) {\n                var allVersions = JSON.parse(body);\n\n                var commandVersions = {};\n                var eventVersions = {};\n                var commandKeys = [];\n                var eventKeys = [];\n\n                allVersions[\"commands\"].forEach(commandVer => {\n                    commandVersions[commandVer[0]] = commandVer[1];\n                    commandKeys.push(commandVer[0]);\n                });\n\n                allVersions[\"events\"].forEach(eventVer => {\n                    eventVersions[eventVer[0]] = eventVer[1];\n                    eventKeys.push(eventVer[0])\n                })\n\n                fs.readFile(\"./data/commands.json\", async function(err, data) {\n                    var data = JSON.parse(data);\n\n                    var systemCommands = await data.filter(command => command != null && commandKeys.includes(command[\"_id\"]));\n\n                    for (i = 0; i < systemCommands.length; i++) {\n                        var systemActionFind = await systemCommands[i][\"actions\"].filter(actionInfo => actionInfo.name = \"Run Script\" && actionInfo.code != null);\n\n                        if (systemActionFind.length != 0) {\n                            var versionCheckSplit = systemActionFind[0].code.split(\"VersionCheck:\");\n                            if (versionCheckSplit[1] != null && versionCheckSplit[1] != commandVersions[systemCommands[i][\"_id\"]] && !isNaN(versionCheckSplit[versionCheckSplit.length - 1])) {\n                                console.log(`[Role Reaction] The command ${systemCommands[i][\"name\"]} needs an update!`)\n                            }\n                        }\n                    }\n                })\n\n                fs.readFile(\"./data/events.json\", async function(err, data) {\n                    var data = JSON.parse(data);\n\n                    var systemEvent = await data.filter(event => event != null && eventKeys.includes(event[\"_id\"]));\n\n                    for (i = 0; i < systemEvent.length; i++) {\n                        var systemEventFind = await systemEvent[i][\"actions\"].filter(actionInfo => actionInfo.name = \"Run Script\" && actionInfo.code != null);\n\n                        if (systemEventFind.length != 0) {\n                            var versionCheckSplit = systemEventFind[0].code.split(\"VersionCheck:\");\n                            if (versionCheckSplit != null && versionCheckSplit[versionCheckSplit.length - 1] != eventVersions[systemEvent[i][\"_id\"]] && !isNaN(versionCheckSplit[versionCheckSplit.length - 1])) {\n                                console.log(`[Role Reaction] The event ${systemEvent[i][\"name\"]} needs an update!`)\n                            }\n                        }\n                    }\n                })\n            }\n        });\n    }\n\n    if (fs.existsSync('./data/reactionRoleData.json')) {\n        fs.readFile('./data/reactionRoleData.json', function read(err, data) {\n            if (err) {\n                throw err;\n            }\n            data = JSON.parse(data)\n\n            Actions.storeValue(data, 3, 'reactionRoleInf', cache);\n        });\n    } else {\n        fs.writeFile(\"./data/reactionRoleData.json\", \"{}\", function(err) {\n            if (err) {\n                return console.log(err);\n            }\n        });\n        Actions.storeValue({}, 3, 'reactionRoleInf', cache);\n    }\n\n    client.on('raw', packet => {\n        if (!['MESSAGE_REACTION_ADD', 'MESSAGE_REACTION_REMOVE'].includes(packet.t)) return;\n        const channel = client.channels.cache.get(packet.d.channel_id);\n        if (channel.messages.cache.has(packet.d.message_id)) return;\n        channel.messages.fetch(packet.d.message_id).then(message => {\n            const emoji = packet.d.emoji.id ? `${packet.d.emoji.name}:${packet.d.emoji.id}` : packet.d.emoji.name;\n            const reaction = message.reactions.cache.get(emoji);\n            const reactionUser = client.users.cache.get(packet.d.user_id);\n            if (reaction) reaction.users.cache.set(packet.d.user_id, reactionUser);\n            if (reactionUser == null) {\n                console.log(\"Role reaction error: User is not defined! Please make sure you have followed the new setup for intents to allow this command to work!\");\n            } else {\n                if (!reactionUser.bot) {\n                    if (packet.t === 'MESSAGE_REACTION_ADD') {\n                        client.emit('messageReactionAdd', reaction, reactionUser);\n                    }\n                    if (packet.t === 'MESSAGE_REACTION_REMOVE') {\n                        client.emit('messageReactionRemove', reaction, reactionUser);\n                    }\n                }\n            }\n        });\n    });\n\n    client.on('messageReactionAdd', async function(reaction, user) {\n        user = await user;\n\n        if (user == null) {\n            console.log(\"Role reaction error: User is not defined! Please make sure you have followed the new setup for intents to allow this command to work!\");\n        } else {\n            if (!user.bot) {\n                const reactionData = globalVars(\"reactionRoleInf\");\n                const reactionGuild = reaction.message.guild;\n                const reactionMessage = reaction.message;\n                if (reactionData.hasOwnProperty(reactionMessage.id)) {\n                    var emojiName = reaction.emoji.name;\n                    var roleInData = await reactionData[reactionMessage.id].filter(re => re[0] == emojiName || re[0].name == emojiName)\n                    if (roleInData.length != 0) {\n                        var guilduser = await reactionGuild.members.cache.get(user.id);\n                        var roleData = roleInData[0][1];\n\n                        if (!guilduser.roles.cache.has(roleData)) {\n                            var reactionRole = await reactionGuild.roles.cache.get(roleData);\n\n                            guilduser.roles.add(reactionRole)\n                                .catch(function(error) {\n                                    guilduser.send(\"Sorry! I couldn't add the role due to either permission issues or the role's position may be higher than my highest role's position. Please contact an adminstrator about this issue.\")\n                                        .catch(function(error) {\n                                            if (error != \"DiscordAPIError: Cannot send messages to this user\" && debug) {\n                                                console.log(error);\n                                            } else if (debug) {\n                                                console.log(`Unable to send user a message || ${guilduser.name}`)\n                                            }\n                                        });\n                                    if (debug) {\n                                        console.log(error);\n                                    }\n                                });\n\n\n                            if (dmUserAfter) {\n                                guilduser.send(messageSentAdd.replace(\"{rolename}\", `**${reactionRole.name}**`).replace(\"{server}\", `**${reactionGuild.name}**`))\n                                    .catch(function(error) {\n                                        if (error != \"DiscordAPIError: Cannot send messages to this user\" && debug) {\n                                            console.log(error);\n                                        } else if (debug) {\n                                            console.log(`Unable to send user a message || ${guilduser.name}`)\n                                        }\n                                    });\n                            }\n\n                        }\n                    }\n                }\n            }\n        }\n\n    });\n\n    client.on('messageReactionRemove', async function(reaction, user) {\n        user = await user;\n\n        if (user == null) {\n            console.log(\"Role reaction error: User is not defined! Please make sure you have followed the new setup for intents to allow this command to work!\");\n        } else {\n            if (!user.bot) {\n                const reactionData = globalVars(\"reactionRoleInf\");\n                const reactionGuild = reaction.message.guild\n                const reactionMessage = reaction.message;\n                if (reactionData.hasOwnProperty(reactionMessage.id)) {\n                    var emojiName = reaction.emoji.name;\n                    var roleInData = await reactionData[reactionMessage.id].filter(re => re[0] == emojiName || re[0].name == emojiName)\n                    if (roleInData.length != 0) {\n                        var guilduser = await reactionGuild.members.cache.get(user.id);\n                        var roleData = roleInData[0][1];\n\n                        if (guilduser.roles.cache.has(roleData)) {\n                            var reactionRole;\n                            reactionRole = await reactionGuild.roles.cache.get(roleData);\n\n                            guilduser.roles.remove(reactionRole)\n                                .catch(function(error) {\n                                    guilduser.send(\"Sorry! I couldn't remove the role due to either permission issues or the role's position may be higher than my highest role's position. Please contact an adminstrator about this issue.\")\n                                        .catch(function(error) {\n                                            if (error != \"DiscordAPIError: Cannot send messages to this user\" && debug) {\n                                                console.log(error);\n                                            } else if (debug) {\n                                                console.log(`Unable to send user a message || ${guilduser.name}`)\n                                            }\n                                        });\n                                    if (debug) {\n                                        console.log(error);\n                                    }\n                                });\n\n                            if (dmUserAfter) {\n                                guilduser.send(messageSentRemove.replace(\"{rolename}\", `**${reactionRole.name}**`).replace(\"{server}\", `**${reactionGuild.name}**`))\n                                    .catch(function(error) {\n                                        if (error != \"DiscordAPIError: Cannot send messages to this user\" && debug) {\n                                            console.log(error);\n                                        } else if (debug) {\n                                            console.log(`Unable to send user a message || ${guilduser.name}`)\n                                        }\n                                    });\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    });\n}\n\n// VersionCheck:3","storage":"0","varName":"","name":"Run Script"}]},{"name":"AntiSpam","permissions":"NONE","restriction":"1","_id":"aQRSZ","actions":[{"message":"0","varName":"","info":"2","storage":"1","varName2":"msg-text","name":"Store Message Info"},{"member":"1","varName":"","dataName":"anti-spam-protection","comparison":"1","value":"tempVars(\"msg-text\")","iftrue":"0","iftrueVal":"","iffalse":"3","iffalseVal":"3","name":"Check Member Data"},{"channel":"0","varName":"","message":"**${member} SPAM SPAM SPAM!**","storage":"0","varName2":"","name":"Send Message"},{"storage":"0","varName":"","name":"Delete Message"},{"name":"End Action Sequence"},{"member":"1","varName":"","dataName":"anti-spam-protection","changeType":"0","value":"tempVars(\"msg-text\")","name":"Control Member Data"},{"time":"2","measurement":"1","name":"Wait"},{"member":"1","varName":"","dataName":"anti-spam-protection","changeType":"0","value":"tempVars(\"msg-text\")","name":"Control Member Data"}],"comType":"3","event-type":"2"},{"name":"NewEvent","temp":"","event-type":"0","actions":[]}]